/**
 * 
 */
package domain;

import java.math.RoundingMode;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * @author Detlef Tribius
 * 
 * <p>
 * Grundlage der Implementierung ist das folgende DB-Modell.
 * </p>
 * <p>
 * <code>
 * CREATE TABLE data_tbl (<br>
 *   id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY,<br>
 *   sys_tsp TIMESTAMP NOT NULL,<br>
 *   data_a DECIMAL(8, 4),<br>
 *   data_b DECIMAL(8, 4),<br>
 *   data_c DECIMAL(8, 4),<br>
 *   data_d DECIMAL(8, 4) )<br> 
 * </code>
 * </p>
 *
 */
public class Data implements Entity
{
    /**
     * INSERT_STATEMENT - "INSERT INTO DATA_TBL (SYS_TSP, DATA_A, DATA_B, DATA_C, DATA_D) VALUES (?, ?, ?, ?, ?) ";
     * <p>
     * Die PK - Spalte ID wird automatisch als fortlaufende Nummer vergeben.
     * </p>
     */
    public static final String INSERT_STATEMENT = "INSERT INTO DATA_TBL (SYS_TSP, DATA_A, DATA_B, DATA_C, DATA_D) VALUES (?, ?, ?, ?, ?) ";
    
    public static final String SELECT_STATEMENT = "SELECT ID, SYS_TSP, DATA_A, DATA_B, DATA_C, DATA_D FROM DATA_TBL ORDER BY ID ASC";
    /**
     * Genauigkeit SCALE_DATA_A = 4
     */
    public final static int SCALE_DATA_A = 4;
    /**
     * Genauigkeit SCALE_DATA_B = 4
     */
    public final static int SCALE_DATA_B = 4;
    /**
     * Genauigkeit SCALE_DATA_C = 4
     */
    public final static int SCALE_DATA_C = 4;
    /**
     * Genauigkeit SCALE_DATA_D = 4
     */
    public final static int SCALE_DATA_D = 4;
    /**
     * COLUMNS - alle Spalten...
     */
    public final static String[] COLUMNS = 
    { 
        "id",
        "sys_tsp",
        "data_a",
        "data_b",
        "data_c",
        "data_d"
    };
    
    /**
     * Spalte ID vom Typ INTEGER, die Primary-Key-Spalte 
     * wird automatisch durch die DB befuellt... 
     */
    private Integer id;
    /**
     * Zeitstempel sys_tsp wird durch das Programm bereitgestellt
     */
    private java.sql.Timestamp sys_tsp;
    /**
     * Data A
     */
    private java.math.BigDecimal data_a;
    /**
     * Data B
     */
    private java.math.BigDecimal data_b;
    /**
     * Data C
     */
    private java.math.BigDecimal data_c;
    /**
     * Data D
     */
    private java.math.BigDecimal data_d;
    
    /**
     * Data() - Default-Konstruktor
     */
    public Data()
    {
        this(null, null, null, null);
    }
    
    /**
     * 
     * @param a
     * @param b
     * @param c
     * @param d
     * 
     */
    public Data(double a, double b, double c, double d)
    {
        this(new java.math.BigDecimal(a), 
             new java.math.BigDecimal(b),
             new java.math.BigDecimal(c),
             new java.math.BigDecimal(d));
    }
    
    /**
     * 
     * @param data_a
     * @param data_b
     * @param data_c
     * @param data_d
     */
    public Data(java.math.BigDecimal data_a, 
                java.math.BigDecimal data_b,
                java.math.BigDecimal data_c,
                java.math.BigDecimal data_d)
    {
        this.id = null;
        this.sys_tsp  =  java.sql.Timestamp.valueOf(java.time.LocalDateTime.now());
        this.data_a = (data_a != null)? data_a.setScale(SCALE_DATA_A, RoundingMode.HALF_EVEN) 
                                      : java.math.BigDecimal.ZERO;
        this.data_b = (data_b != null)? data_b.setScale(SCALE_DATA_B, RoundingMode.HALF_EVEN) 
                                      : java.math.BigDecimal.ZERO;
        this.data_c = (data_c != null)? data_c.setScale(SCALE_DATA_C, RoundingMode.HALF_EVEN) 
                                      : java.math.BigDecimal.ZERO;
        this.data_d = (data_d != null)? data_d.setScale(SCALE_DATA_D, RoundingMode.HALF_EVEN) 
                                      : java.math.BigDecimal.ZERO;
    }
    
    @Override
    public String getInsertStatement()
    {
        return Data.INSERT_STATEMENT;
    }

    public static String getSelectStatement()
    {
        return Data.SELECT_STATEMENT;
    }

    /**
     * fillPrepStmtForInsert(PreparedStatement preparedStatement)
     * <p>
     * Das PreparedStatement ist erzeugt worden auf der Basis des INSERT_STATEMENT.
     * </p>
     * @throws SQLException 
     */
    @Override
    public void fillPrepStmtForInsert(PreparedStatement preparedStatement) throws SQLException
    {
        if (preparedStatement != null)
        {
            preparedStatement.setTimestamp(1, this.sys_tsp);
            preparedStatement.setBigDecimal(2, this.data_a);
            preparedStatement.setBigDecimal(3, this.data_b);
            preparedStatement.setBigDecimal(4, this.data_c);
            preparedStatement.setBigDecimal(5, this.data_d);
        }
    }

    /**
     * Das ResultSet umfasst eine Menge von  Rows der Tabelle.
     * @throws SQLException 
     */
    @Override
    public void setFromResult(ResultSet resultSet) throws SQLException
    {
        if (resultSet != null)
        {
            java.sql.ResultSetMetaData columns = resultSet.getMetaData();
            int counter = 0;
            while (counter < columns.getColumnCount())
            {
                counter++;
                final String columnName = columns.getColumnName(counter); 
                if (Data.COLUMNS[0].equalsIgnoreCase(columnName))
                {
                    // Spalte ID...
                    this.id = Integer.valueOf(resultSet.getInt(columnName));
                    if (resultSet.wasNull())
                    {
                        this.id = null;
                    }
                }
                else if (Data.COLUMNS[1].equalsIgnoreCase(columnName))
                {
                    // Spalte SYS_TSP...
                    this.sys_tsp = resultSet.getTimestamp(columnName);
                }
                else if (Data.COLUMNS[2].equalsIgnoreCase(columnName))
                {
                    // Spalte DATA_A
                    this.data_a = resultSet.getBigDecimal(columnName);
                }
                else if (Data.COLUMNS[3].equalsIgnoreCase(columnName))
                {
                    // Spalte DATA_B
                    this.data_b = resultSet.getBigDecimal(columnName);
                }
                else if (Data.COLUMNS[4].equalsIgnoreCase(columnName))
                {
                    // Spalte DATA_C
                    this.data_c = resultSet.getBigDecimal(columnName);
                }
                else if (Data.COLUMNS[5].equalsIgnoreCase(columnName))
                {
                    // Spalte DATA_D
                    this.data_d = resultSet.getBigDecimal(columnName);
                }
                else
                {
                    // Unbekannte Spalte...
                    throw new RuntimeException("Fehler! Unbekannte Spalte (" + columnName + ")!");
                }
            }
        }
    }

    /**
     * @return the id
     */
    public final Integer getId()
    {
        return id;
    }

    /**
     * @return the sys_tsp
     */
    public final java.sql.Timestamp getSys_tsp()
    {
        return sys_tsp;
    }

    /**
     * @return the data_a
     */
    public final java.math.BigDecimal getData_a()
    {
        return this.data_a;
    }

    /**
     * @return the data_b
     */
    public final java.math.BigDecimal getData_b()
    {
        return this.data_b;
    }

    /**
     * @return the data_c
     */
    public final java.math.BigDecimal getData_c()
    {
        return this.data_c;
    }

    /**
     * @return the data_d
     */
    public final java.math.BigDecimal getData_d()
    {
        return this.data_d;
    }
    
    
    @Override
    public String[] getColums()
    {
        return Data.COLUMNS;
    }

    /**
     * toString() - Zu Protokollzwecken...
     */
    public String toString()
    {
        return new StringBuilder().append("[id=")
                                  .append((this.id != null)? id.toString():"?")
                                  .append(": ")
                                  .append(this.sys_tsp)
                                  .append(" ")
                                  .append(this.data_a)
                                  .append(" ")
                                  .append(this.data_b)
                                  .append(" ")
                                  .append(this.data_c)
                                  .append(" ")
                                  .append(this.data_d)
                                  .append("]")
                                  .toString();
    }
    
}
