/**
 * 
 */
package domain;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * @author Detlef Tribius
 * 
 * <p>
 * Grundlage der Implementierung ist das folgende DB-Modell.
 * </p>
 * <p>
 * <code>
 * CREATE TABLE data_tbl (<br>
 *   id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY,<br>
 *   sys_tsp TIMESTAMP NOT NULL,<br>
 *   data_0 DECIMAL(8, 4),<br>
 *   data_1 DECIMAL(8, 4),<br>
 *   data_2 DECIMAL(8, 4),<br>
 *   data_3 DECIMAL(8, 4) )<br> 
 * </code>
 * </p>
 *
 */
public class Data implements Entity
{

    /**
     * order - Anzahl der BigDecimal-Daten-Spalten.
     */
    private final int order;
    
    /**
     * INSERT_STATEMENTS[] - Array mit den INSERT INTO-Anweisungen...  
     * 
     * Beispielsweise fuer 4 data-Colums:
     * "INSERT INTO DATA_TBL (SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3) VALUES (?, ?, ?, ?, ?) ";
     * <p>
     * Die PK - Spalte ID wird automatisch als fortlaufende Nummer vergeben.
     * </p>
     */
    public static final String INSERT_STATEMENTS[] = 
    {
        "INSERT INTO DATA_TBL (SYS_TSP) VALUES (?) ",   
        "INSERT INTO DATA_TBL (SYS_TSP, DATA_0) VALUES (?, ?) ",   
        "INSERT INTO DATA_TBL (SYS_TSP, DATA_0, DATA_1) VALUES (?, ?, ?) ",    
        "INSERT INTO DATA_TBL (SYS_TSP, DATA_0, DATA_1, DATA_2) VALUES (?, ?, ?, ?) ",    
        "INSERT INTO DATA_TBL (SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3) VALUES (?, ?, ?, ?, ?) ",
        "INSERT INTO DATA_TBL (SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3, DATA_4) VALUES (?, ?, ?, ?, ?, ?) ",    
        "INSERT INTO DATA_TBL (SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3, DATA_4, DATA_5) VALUES (?, ?, ?, ?, ?, ?, ?) ", 
        "INSERT INTO DATA_TBL (SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3, DATA_4, DATA_5, DATA_6) VALUES (?, ?, ?, ?, ?, ?, ?, ?) ", 
        "INSERT INTO DATA_TBL (SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3, DATA_4, DATA_5, DATA_6, DATA_7) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?) ",
        "INSERT INTO DATA_TBL (SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3, DATA_4, DATA_5, DATA_6, DATA_7, DATA_8) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ",
        "INSERT INTO DATA_TBL (SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3, DATA_4, DATA_5, DATA_6, DATA_7, DATA_8, DATA_9) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) "
    };
    
    public static final String SELECT_STATEMENTS[] =
    {
        "SELECT ID, SYS_TSP FROM DATA_TBL ORDER BY ID ASC",
        "SELECT ID, SYS_TSP, DATA_0 FROM DATA_TBL ORDER BY ID ASC",
        "SELECT ID, SYS_TSP, DATA_0, DATA_1 FROM DATA_TBL ORDER BY ID ASC",
        "SELECT ID, SYS_TSP, DATA_0, DATA_1, DATA_2 FROM DATA_TBL ORDER BY ID ASC",
        "SELECT ID, SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3 FROM DATA_TBL ORDER BY ID ASC",
        "SELECT ID, SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3, DATA_4 FROM DATA_TBL ORDER BY ID ASC",
        "SELECT ID, SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3, DATA_4, DATA_5 FROM DATA_TBL ORDER BY ID ASC",
        "SELECT ID, SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3, DATA_4, DATA_5, DATA_6 FROM DATA_TBL ORDER BY ID ASC",
        "SELECT ID, SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3, DATA_4, DATA_5, DATA_6, DATA_7 FROM DATA_TBL ORDER BY ID ASC",
        "SELECT ID, SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3, DATA_4, DATA_5, DATA_6, DATA_7, DATA_8 FROM DATA_TBL ORDER BY ID ASC",
        "SELECT ID, SYS_TSP, DATA_0, DATA_1, DATA_2, DATA_3, DATA_4, DATA_5, DATA_6, DATA_7, DATA_8, DATA_9 FROM DATA_TBL ORDER BY ID ASC",
    };        

    /**
     * COLUMNS - alle Spalten (alle max. moegliche!)...
     */
    public final static String[][] COLUMNS = 
    { 
        {"id", "sys_tsp"},    
        {"id", "sys_tsp", "data_0"},
        {"id", "sys_tsp", "data_0", "data_1"},
        {"id", "sys_tsp", "data_0", "data_1", "data_2"},
        {"id", "sys_tsp", "data_0", "data_1", "data_2", "data_3"},
        {"id", "sys_tsp", "data_0", "data_1", "data_2", "data_3", "data_4"},
        {"id", "sys_tsp", "data_0", "data_1", "data_2", "data_3", "data_4", "data_5"},
        {"id", "sys_tsp", "data_0", "data_1", "data_2", "data_3", "data_4", "data_5", "data_6"},
        {"id", "sys_tsp", "data_0", "data_1", "data_2", "data_3", "data_4", "data_5", "data_6", "data_7"},
        {"id", "sys_tsp", "data_0", "data_1", "data_2", "data_3", "data_4", "data_5", "data_6", "data_7", "data_8"},
        {"id", "sys_tsp", "data_0", "data_1", "data_2", "data_3", "data_4", "data_5", "data_6", "data_7", "data_8", "data_9"}
    };
   
    /**
     * DEFAULT_SCALE = 4 - Standard-Genauigkeit in der Datenbank/BigDecimal-Objekten...
     */
    public final static int DEFAULT_SCALE = 4;
    
    /**
     * Genauigkeit SCALE[][] - jeweils den data-Spalten aus COLUMNS zugeordnet
     */
    public final static int[][] SCALES = 
    {
        {},    
        {DEFAULT_SCALE},
        {DEFAULT_SCALE, DEFAULT_SCALE},
        {DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE},
        {DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE},
        {DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE},
        {DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE},
        {DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE},
        {DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE},
        {DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE},
        {DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE, DEFAULT_SCALE}
    };
    
    /**
     * Spalte ID vom Typ INTEGER, die Primary-Key-Spalte 
     * wird automatisch durch die DB befuellt... 
     */
    private Integer id;
    
    /**
     * Zeitstempel sys_tsp wird durch das Programm bereitgestellt
     */
    private java.sql.Timestamp sys_tsp;
    
    /**
     * data - Array mit den Daten...
     * <p>
     * Die Ordnung des Arrays ergibt sich aus dem Data-Konstruktor und muss mit der Datenbank-Struktur
     * uebereinstimmen. 
     * </p>
     */
    private final java.math.BigDecimal[] data;
    
    /**
     * Data(double a, double b, double c, double d)
     *
     * Beauftragung des Konstruktors mit den BigDecimal-Parametern
     *
     * @param a
     * @param b
     * @param c
     * @param d
     * 
     */
    public Data(double a, double b, double c, double d)
    {
        // Alles weitere im gerufenen Konstruktor...
        this(new java.math.BigDecimal(a), 
             new java.math.BigDecimal(b),
             new java.math.BigDecimal(c),
             new java.math.BigDecimal(d));
    }

    /**
     * Data(double a, double b, double c, double d, double e, double f)
     *
     * Beauftragung des Konstruktors mit den BigDecimal-Parametern
     *
     * @param a
     * @param b
     * @param c
     * @param d
     * @param e
     * @param f
     * 
     */
    public Data(double a, double b, double c, double d, double e, double f)
    {
        // Alles weitere im gerufenen Konstruktor...
        this(new java.math.BigDecimal(a), 
             new java.math.BigDecimal(b),
             new java.math.BigDecimal(c),
             new java.math.BigDecimal(d),
             new java.math.BigDecimal(e),
             new java.math.BigDecimal(f));
    }
    
    /**
     * Data(...) - Konstruktor mit 4 BigDecimal-Parameter!
     * 
     * @param data_0 - java.math.BigDecimal
     * @param data_1 - java.math.BigDecimal
     * @param data_2 - java.math.BigDecimal
     * @param data_3 - java.math.BigDecimal
     */
    public Data(java.math.BigDecimal data_0, 
                java.math.BigDecimal data_1,
                java.math.BigDecimal data_2,
                java.math.BigDecimal data_3)
    {
        this.order = 4;
        this.data = new java.math.BigDecimal[4];
        initData(data_0, data_1, data_2, data_3);
    }

    /**
     * Data(...) - Konstruktor mit 6 BigDecimal-Parameter!
     * 
     * @param data_0 - java.math.BigDecimal
     * @param data_1 - java.math.BigDecimal
     * @param data_2 - java.math.BigDecimal
     * @param data_3 - java.math.BigDecimal
     * @param data_4 - java.math.BigDecimal
     * @param data_5 - java.math.BigDecimal
     */
    public Data(java.math.BigDecimal data_0, 
                java.math.BigDecimal data_1,
                java.math.BigDecimal data_2,
                java.math.BigDecimal data_3,
                java.math.BigDecimal data_4,
                java.math.BigDecimal data_5)
    {
        this.order = 6;
        this.data = new java.math.BigDecimal[6];
        initData(data_0, data_1, data_2, data_3, data_4, data_5);
    }
    
    /**
     * initData(java.math.BigDecimal... bigDecimals) - Initialisierung des data-Arrays...
     * <p>
     * this.order ist bereits mit der Anzahl der BigDecimal-Arrayelemente bestimmt.
     * this.data[] ist bereits als Array instanziiert.
     * </p>
     * @param bigDecimals
     */
    private final void initData(java.math.BigDecimal... bigDecimals)
    {
        this.id = null;
        this.sys_tsp  =  java.sql.Timestamp.valueOf(java.time.LocalDateTime.now());
        for (int index = 0; index < bigDecimals.length; index++)
        {
            final int newScale = Data.SCALES[this.order][index];
            this.data[index] = (bigDecimals[index] != null)? bigDecimals[index].setScale(newScale, RoundingMode.HALF_EVEN)
                                                           : java.math.BigDecimal.ZERO.setScale(newScale);
        }
    }
    
    /**
     * getInsertStatement() - liefert das Insert-Statement entsprechend der Anzahl
     * der data-Columns
     */
    @Override
    public String getInsertStatement()
    {
        return Data.INSERT_STATEMENTS[this.order];
    }

    public String getSelectStatement()
    {
        return Data.SELECT_STATEMENTS[this.order];
    }

    /**
     * fillPrepStmtForInsert(PreparedStatement preparedStatement)
     * <p>
     * Das PreparedStatement ist erzeugt worden auf der Basis des INSERT_STATEMENT.
     * </p>
     * @throws SQLException 
     */
    @Override
    public void fillPrepStmtForInsert(PreparedStatement preparedStatement) throws SQLException
    {
        if (preparedStatement != null)
        {
            // Erste Spalte mit sys_tsp laden...  
            int parameterIndex = 1;
            int scaleIndex = 0;
            preparedStatement.setTimestamp(parameterIndex++, this.sys_tsp);
            // Alle folgenden Spalten mit dem Inhalt des Arrays this.data fuellen...
            for(java.math.BigDecimal data: this.data)
            {
                final int newScale = Data.SCALES[this.order][scaleIndex++];
                preparedStatement.setBigDecimal(parameterIndex++, (data != null)? data 
                                                                : BigDecimal.ZERO.setScale(newScale));
            }
        }
    }

    /**
     * Das ResultSet umfasst eine Menge von  Rows der Tabelle.
     * @throws SQLException 
     */
    @Override
    public void setFromResult(ResultSet resultSet) throws SQLException
    {
        if (resultSet != null)
        {
            // this.order: Anzahl der data-Columns, Bereich von 0 bis max. 10.
            // columns[0] immer ID, columns[1] immer SYS_TSP, ab columns[2] BigDecimal-Data
            // this.order = 0 => {"id", "sys_tsp"},
            // this.order = 1 => {"id", "sys_tsp", "data_0"},
            String[] columns = Data.COLUMNS[this.order];
            java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
            int counter = 0;
            while (counter < metaData.getColumnCount())
            {
                // counter: Iteration ueber DB-Information aus metaData.
                counter++;
                final String columnName = metaData.getColumnName(counter); 
                // columnIndex: Iteration ueber columns[] - Array mit den Spaltennamen 
                //                                          entsprechend this.order
                int columnIndex = 0;
                if (columns[columnIndex++].equalsIgnoreCase(columnName))
                {
                    // Es handelt sich um Spalte ID...
                    this.id = Integer.valueOf(resultSet.getInt(columnName));
                    if (resultSet.wasNull())
                    {
                        this.id = null;
                    }
                    continue;
                }
                if (columns[columnIndex++].equalsIgnoreCase(columnName))
                {
                    // Spalte SYS_TSP...
                    this.sys_tsp = resultSet.getTimestamp(columnName);
                    continue;
                }
                // Aktuell weder Spalte ID noch Spalte SYS_TSP...
                // Jetzt die Daten-Spalten auf Uebereinstimmung absuchen...
                label:
                {
                    int dataIndex = 0;
                    // Iteration ueber alle Spalten entsprechend this.order...
                    while(columnIndex < columns.length)
                    {
                        if (columns[columnIndex++].equalsIgnoreCase(columnName))
                        {
                            // Spalte columnName gefunden
                            this.data[dataIndex] = resultSet.getBigDecimal(columnName);
                            break label;
                        }
                        dataIndex++;
                    }
                    // Unbekannte Spalte...
                    throw new RuntimeException("Fehler! Unbekannte Spalte (" + columnName + ")!");
                } // end() label.
            }
        }
    }

    /**
     * @return the id
     */
    public final Integer getId()
    {
        return id;
    }

    /**
     * @return the sys_tsp
     */
    public final java.sql.Timestamp getSys_tsp()
    {
        return sys_tsp;
    }

    /**
     * @return the data
     */
    public final java.math.BigDecimal getData(int columnIndex)
    {
        return this.data[columnIndex];
    }

    
    @Override
    public String[] getColums()
    {
        return Data.COLUMNS[this.order];
    }

    /**
     * toString() - Zu Protokollzwecken...
     */
    public String toString()
    {
        final StringBuilder buffer = new StringBuilder().append("[id=")
                                                        .append((this.id != null)? id.toString():"?")
                                                        .append(": ")
                                                        .append(this.sys_tsp);
        
        for(BigDecimal data: this.data)
        {
            buffer.append(" ").append((data != null)? data : "null");
        }
        
        return buffer.toString();
    }
}
